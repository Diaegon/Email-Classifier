#!/usr/bin/env python3
"""
Script para configurar PostgreSQL automaticamente
"""

import os
import sys
import subprocess
import time
from pathlib import Path

def check_docker():
    """Verifica se Docker est√° instalado"""
    try:
        result = subprocess.run(['docker', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Docker encontrado:", result.stdout.strip())
            return True
        else:
            print("‚ùå Docker n√£o encontrado")
            return False
    except FileNotFoundError:
        print("‚ùå Docker n√£o instalado")
        return False

def start_postgres_docker():
    """Inicia PostgreSQL via Docker"""
    print("üê≥ Iniciando PostgreSQL via Docker...")
    
    # Verificar se docker-compose existe
    if not Path("docker-compose.yml").exists():
        print("‚ùå docker-compose.yml n√£o encontrado")
        return False
    
    try:
        # Iniciar containers
        result = subprocess.run(['docker-compose', 'up', '-d'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ PostgreSQL iniciado com sucesso!")
            print("üìä Dados de conex√£o:")
            print("   Host: localhost")
            print("   Port: 5432")
            print("   Database: email_classifier")
            print("   User: postgres")
            print("   Password: password123")
            print("   URL: postgresql://postgres:password123@localhost:5432/email_classifier")
            print("\nüåê PgAdmin (opcional): http://localhost:8080")
            print("   Email: admin@admin.com")
            print("   Password: admin123")
            return True
        else:
            print("‚ùå Erro ao iniciar PostgreSQL:", result.stderr)
            return False
    except FileNotFoundError:
        print("‚ùå docker-compose n√£o encontrado")
        print("üí° Instale Docker Desktop: https://www.docker.com/products/docker-desktop/")
        return False

def create_env_file():
    """Cria arquivo .env com configura√ß√µes do PostgreSQL"""
    env_content = """# Configura√ß√£o do Banco de Dados
DB_DATABASE_URL=postgresql://postgres:password123@localhost:5432/email_classifier

# Configura√ß√£o do LLM (escolha uma)
LLM_PROVIDER=google
GOOGLE_API_KEY=sua_chave_aqui
GOOGLE_MODEL=gemini-2.0-flash
"""
    
    env_path = Path("apps/backend/.env")
    env_path.parent.mkdir(parents=True, exist_ok=True)
    
    with open(env_path, 'w') as f:
        f.write(env_content)
    
    print(f"‚úÖ Arquivo .env criado em: {env_path}")

def test_connection():
    """Testa conex√£o com PostgreSQL"""
    print("üîç Testando conex√£o com PostgreSQL...")
    
    try:
        # Aguardar PostgreSQL inicializar
        time.sleep(5)
        
        # Testar conex√£o
        result = subprocess.run([
            'docker', 'exec', 'email-classifier-postgres',
            'psql', '-U', 'postgres', '-d', 'email_classifier', '-c', 'SELECT version();'
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Conex√£o com PostgreSQL funcionando!")
            return True
        else:
            print("‚ùå Erro na conex√£o:", result.stderr)
            return False
    except Exception as e:
        print(f"‚ùå Erro ao testar conex√£o: {e}")
        return False

def show_instructions():
    """Mostra instru√ß√µes de uso"""
    print("\n" + "="*60)
    print("üöÄ POSTGRESQL CONFIGURADO COM SUCESSO!")
    print("="*60)
    print("\nüìã Pr√≥ximos passos:")
    print("1. Configure sua API LLM no arquivo .env")
    print("2. Execute as migra√ß√µes:")
    print("   cd apps/backend")
    print("   python migrate.py init")
    print("   python migrate.py upgrade")
    print("3. Inicie o servidor:")
    print("   python -c \"import uvicorn; uvicorn.run('email_classifier_llm.main:app', host='0.0.0.0', port=8000)\"")
    print("\nüîß Comandos √∫teis:")
    print("   docker-compose up -d    # Iniciar PostgreSQL")
    print("   docker-compose down     # Parar PostgreSQL")
    print("   docker-compose logs     # Ver logs")
    print("\nüåê Acesse:")
    print("   Aplica√ß√£o: http://localhost:8000")
    print("   PgAdmin: http://localhost:8080")

def main():
    print("üêò Configurador de PostgreSQL para Email Classifier")
    print("="*50)
    
    # Verificar Docker
    if not check_docker():
        print("\nüí° Instale Docker Desktop primeiro:")
        print("   https://www.docker.com/products/docker-desktop/")
        return False
    
    # Iniciar PostgreSQL
    if not start_postgres_docker():
        return False
    
    # Aguardar inicializa√ß√£o
    print("‚è≥ Aguardando PostgreSQL inicializar...")
    time.sleep(10)
    
    # Testar conex√£o
    if not test_connection():
        print("‚ö†Ô∏è  PostgreSQL pode estar ainda inicializando...")
        print("   Tente novamente em alguns minutos")
    
    # Criar arquivo .env
    create_env_file()
    
    # Mostrar instru√ß√µes
    show_instructions()
    
    return True

if __name__ == "__main__":
    main()
