#!/usr/bin/env python3
"""
Script de deploy para Railway
Executa migra√ß√µes e inicia a aplica√ß√£o
"""

import os
import sys
import subprocess
from pathlib import Path

def run_migrations():
    """Executa migra√ß√µes do banco de dados"""
    print("üîÑ Executando migra√ß√µes do banco de dados...")
    
    try:
        # Importar e executar migra√ß√µes
        from email_classifier_llm.database import init_database, engine
        from sqlalchemy import text
        
        # Verificar conex√£o
        with engine.connect() as conn:
            result = conn.execute(text("SELECT 1"))
            print("‚úÖ Conex√£o com banco de dados estabelecida")
        
        # Executar migra√ß√µes
        init_database()
        print("‚úÖ Migra√ß√µes executadas com sucesso!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao executar migra√ß√µes: {e}")
        return False

def start_app():
    """Inicia a aplica√ß√£o FastAPI"""
    print("üöÄ Iniciando aplica√ß√£o...")
    
    try:
        import uvicorn
        uvicorn.run(
            "email_classifier_llm.main:app",
            host="0.0.0.0",
            port=int(os.getenv("PORT", 8000)),
            log_level="info"
        )
    except Exception as e:
        print(f"‚ùå Erro ao iniciar aplica√ß√£o: {e}")
        sys.exit(1)

def main():
    """Fun√ß√£o principal do deploy"""
    print("üöÄ Iniciando deploy do Email Classifier...")
    print("=" * 50)
    
    # Verificar vari√°veis de ambiente
    db_url = os.getenv("DB_DATABASE_URL")
    if not db_url:
        print("‚ö†Ô∏è  DB_DATABASE_URL n√£o encontrada")
        print("   Usando SQLite como fallback")
    else:
        print(f"üìä Banco de dados: {db_url.split('://')[0]}")
    
    # Executar migra√ß√µes
    if not run_migrations():
        print("‚ö†Ô∏è  Migra√ß√µes falharam, continuando sem banco de dados")
    
    # Iniciar aplica√ß√£o
    start_app()

if __name__ == "__main__":
    main()
